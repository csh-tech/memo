====
C++
====

面向对象
========

1. 如何理解面向对象编程

#. 面向对象设计的原则

#. c是面相过程的，c++是面向对象的；c++最重要的特性就是引入了面向对象机制，class关键字。

#. 面向对象三大特征

#. 如何理解面向对象

#. 面向对象的设计原则

#. 做了哪些面向对象编程的工作？

类
======

1. 类重载加法函数

#. 长方形类和正方形类哪一个应该做父类

#. 友元函数和友元类的概念

#. 给一个空类，编译器会编译出什么函数？

#. C++中各种数据类型的sizeof

#. C++中结构体和类的区别

#. 类的对象数据和方法是怎么样的是共享的还是各自都有的，类方法的存储位置

#. 空类编译器自动生成哪些函数

#. 一个空类编译器会自动生成哪些函数

#. 一个类对象数据的初始化顺序

#. 子类能使用被重写了的父类方法吗，怎么写

#. 空类会自动生成哪些函数

#. 有哪些强制类型转化，使用原则

#. C++ 的类型转化是否安全

#. 静态函数和类中静态成员函数的区别

#. 一个空类会生成哪些函数

#. C++中类成员的访问权限和继承权限问题

#. 空类编译器会自动添加哪些函数

#. C++类对象从编写代码定义到生成可执行文件的全过程描述

#. 抽象类有什么作用

#. 如何让类不能被继承

#. 迭代器的类型和作用

#. 编译器会为一个空类自动生成那些函数

#. 空类占多少字节

#. C++ 类中数据成员初始化顺序

#. 如果禁止类实例化时候的动态分配方式

#. 实现一个类成员函数，不允许修改类的数据成员

#. C++ 编译器会给一个空类自动生成哪些函数

#. C++ 类的初始化顺序

#. 抽象类可以实例化对象吗？

#. 既然私有继承，派生类不能够访问，为什么又要继承？

#. 如何访问其他类的私有成员？

#. 讲一下抽象类？

#. 一个类对象数据的初始化顺序？

#. 静态成员函数是什么

继承
======

1. public,protect,private 讲一下？

#. 三种继承方式下的访问权限

#. 继承有什么原则？

#. 公有继承，私有继承，保护继承的使用场景，和你的判断使用哪种的原则？

#. 虚继承作用

#. 继承时的访问权限控制符有啥区别

多态
======

1. c语言实现多态，struct，函数指针

#. 多态原理

#. C++中的多态(编译时多态、运行时多态)

#. 对C++多态的理解

#. C++多态和模板偏特化的概念

#. C++多态的实现原理

#. 运行时多态的实现原理

#. 多态是什么？怎么实现？

#. c++的封装，整合，多态区别

#. C++中封装、继承、多态

#. C++多态实现原理

#. c++三大特性： 继承 、多态、 封装

#. 什么是多态

#. 多态的底层实现

#. 动态多态和静态多态

#. 封装，继承，多态介绍一下

#. 你对多态的理解？

虚函数
=======

1. 什么是纯虚函数，应用

#. 虚函数与纯虚函数的区别？为什么要有纯虚函数(两个方面)

#. 纯虚函数与抽象基类的概念

#. 虚函数表和指针

#. c++继承时的虚函数表

#. 虚函数了解吗？虚虚函数表是如何找到重写的虚函数？

#. 虚函数表存放的内容

#. 虚表指针和虚函数表的存放位置

#. 虚函数表是谁维护的？

#. 虚函数表存放的是什么？

#. 含有虚函数的类，虚函数表存放在哪里

#. 派生类虚函数表的具体结构？

#. 虚函数表的存放内容

#. 虚表指针和虚函数表的存放位置

#. 虚函数表的存放内容

#. 多继承的虚函数表结构

#. 什么是虚函数表

#. 虚函数表和虚表指针是一个对象一个还是？

#. 虚函数表跟对象还是跟类绑定

#. 构造函数可以为虚函数吗，为什么

#. 为什么构造函数不能是虚函数

#. 构造函数调用虚函数结果

#. 构造函数可以是虚函数吗

#. 拷贝构造函数为什么传引用

#. 构造函数可以是虚函数吗，析构函数呢

#. 虚函数和析构函数了解吗？解释一下

#. 基类的析构函数不是虚函数有什么影响

#. 为什么析构函数是虚函数

#. 析构函数可以是虚函数吗

#. 为什么将析构函数设置成虚函数

#. 析构函数需要是虚函数吗?为什么

#. 析构函数可以是虚函数吗，应用场景

#. C++ 析构函数可以是虚函数吗？为什么要将析构函数设置为虚函数

#. C++虚函数的实现机制

#. 什么函数不可以为虚函数？为什么？

#. 虚函数实现机制

#. 多态和虚函数

#. 虚函数放在模板类里可不可以

#. 虚函数有什么好处

#. 每个类中有一个虚函数，还是每个对象有一个虚函数？

#. 什么是虚函数

#. 虚函数的实现原理

#. 虚表指针的存放位置

#. 虚表指针创建的时机

#. 所有函数都可以是虚函数吗

#. 虚函数的工作原理 怎么维持虚函数

#. 基类有一个虚函数 fun，派生类有虚函数 fun。用基类指针指向派生类对象调用的是哪个函数？

#. 一个只含有虚函数的类是几个字节

#. 空类的字节大小

#. 什么是多态

#. 派生类虚构的时候会调用基类的虚构函数吗，什么情况下会调用

#. 什么是动态绑定

#. 讲 C++ 对象模型，多态怎么实现，虚函数对象存储结构

#. 虚函数的原理、多态的底层实现

#. C++ 的多态是如何实现的

#. C++ 的虚函数是如何实现的

#. 什么是虚函数

#. 怎么定义虚函数

#. 类函数哪些需要设置成虚函数，你怎么判断一个函数需要声明为虚函数？

#. 如果同名函数为虚函数又是怎么样的？

#. 虚函数的工作原理？

#. 虚函数的工作方式？

#. 虚函数的实现原理

#. 虚函数的机制

#. 成员变量增多会影响类的sizeof吗？虚函数增多呢？

#. 如何实现虚表的

#. 虚表指针存放的位置，头部还是尾部

#. 如果多重继承只有一个虚表指针吗

#. sizeof运算符、字节对齐和虚表指针

#. 单继承和多继承得虚表结构

#. 如果是多重继承只有一个虚表指针吗？


动态绑定
==========

1. 什么是动态绑定

#. 静态绑定和动态绑定的区别

#. 动态绑定的具体实现

#. 静态绑定和动态绑定是怎么实现的

模板
=======

1. 指针和引用

#. 说一说模板和类的区别

#. 模板的编译过程，模板是什么时候实例化的

#. 什么是模板特化

#. 模板和宏的区别

#. 什么是模板，模板特化，偏特化

#. 什么是模板，模板特化，偏特化

#. 函数模板与类模板的区别

#. C++ 模板做什么的？

#. 怎么实现模板

#. 模板特化的概念，为什么特化

#. 使用过类模板吗？

#. 函数模板和类模板的区别？

#. 函数重载和函数模板的区别？

#. 函数模板是怎么去调用到对应的重载版本？

#. 函数模板在二进制文件中是存放了全部重载版本吗，还是怎么？

#. 可变参数模板的作用

#. 什么是泛型编程

重载
=====

1. 方法重写 和重载区别？

#. 函数重载的实现机制

#. 重载和重写的区别

#. 重载和重写和覆盖的区别

#. 覆盖、重载和重写的区别

#. 模板和函数重载的区别

#. 函数重载，变量前有无const是否可以重载

#. 重载，重写，覆盖的区别

#. 什么是函数重载，实现原理

#. 重载函数const可以作为重载依据么

#. 函数重载，重写，隐藏的区别

#. 重写、重载、覆盖的区别

#. 函数重载 max。是直接比较大小吗？

#. 函数重载 max 传递的类对象，想通过直接比较的方式怎么实现？

#. 重载运算符 < 有哪些需要注意的点？

#. overload和override区别

友元函数
===========

1. 友元函数的作用

#. 既然私有成员就是不想让外界访问，为什么又设计了友元的方式去能够访问私有成员？

#. 怎么访问私有函数

struct
========

1. struct 和 class 的区别

#. C 和 C++ struct 的区别

#. struct的位域

#. struct 和 union 区别

#. struct 里面只有一个 char，占多大内存

#. struct内存中所占字节数

#. union 和 struct 的区别

#. class 和 struct 的区别

#. class和struct的区别

#. c++的struct声明自动将结构类型名typedef；c中struct的名字只在结构标签名字空间中，不是作为一种类型出现

#. 为什么有了 class 还保留了 struct

#. C 和 C++ struct 区别

#. C 和 C++ static 区别

#. struct 和 class 的区别，什么时候用 struct,什么时候用 class？

#. struct 字节对齐的方式，字节对齐有什么好处？

指针
=========

1. 基类对象的指针转换为派生类对象的指针使用哪一个类型转换运算符

#. 指针和引用的区别

#. 指针和引用有什么区别

#. 虚指针知道吗？

#. sizeof 指针多少 sizeof原理

#. c中，void \*可以隐式转换成其他指针类型；c++中要求限时转换，否则编译通不过

#. this指针

#. 关于不同系统下int指针以及int型的字节数

#. 指针数组的指针字节大小

#. 为什么用指针，指针有什么用

#. 派生类指针怎么用基类方法

#. 对指针还是对象进行约束？

#. 指针和引用的区别

#. 指针函数和函数指针的区别

#. 什么是野指针

#. 在主函数中对一个指向字符串的指针分别调用sizeof 和 strlen分别得到什么答案

#. 指针和引用的区别

#. 传值和传引用和传指针的区别

#. 什么是野指针、空指针以及区别

#. 函数指针

#. 函数指针和指针函数的区别

#. 空指针和野指针的区别

#. 什么情况下产生野指针

#. 指针和引用的区别

#. 传值、传指针、传引用的区别

#. 指针和数组的区别

#. 类成员函数的函数指针怎么写

#. 用sizeof去计算上述指针和数组的区别

#. 指针和引用的区别

#. 构造函数中this指针暴露了会有什么后果

#. 什么是野指针，产生的原因，有什么解决方法

#. 什么是野指针，怎么检测

#. 函数指针和指针函数的区别

#. 定义函数指针、指针函数

#. 写一个常量指针和指针常量

#. 指针和引用的区别

#. 指针的大小

#. 指针和 const 的用法

#. 什么是指针

#. 什么是野指针和悬空指针

#. 指针和引用的区别

#. 野指针是什么？有什么工具可以检测吗？

#. 空指针和野指针的区别？

#. 什么情况下产生野指针？

#. 基类指针怎么动态的知道自己指向的动态对象？

#. 基类指针操作基类对象，和基类指针操作派生类对象，和派生类指针操作基类对象，和派生类指针操作派生类对象，操作同名函数时的表现？

智能指针
===========

1. 关键词：原理、作用、区别、使用场景、用法、循环引用、线程安全、引用计数、内存泄漏

#. C++有哪几种智能指针？说一说各自的实现原理、作用、区别、使用场景、用法

#. C++智能指针和Java的gc有什么区别？

#. 说说智能指针的循环引用问题，weak_ptr是怎么解决循环引用问题？

#. unique_ptr是如何实现独占对象的？

#. 智能指针线程安全的吗？shared_ptr如何实现线程安全，手动实现一个线程安全的shared_ptr。

#. 智能指针是如何实现引用计数的？

#. 智能指针能不能防止内存泄漏？是如何解决内存泄露的？

#. unique_ptr所有权转移的方式

#. 一个 unique_ptr 怎么赋值给另一个 unique_ptr 对象

#. unique_ptr 中 std::move() 作用

构造函数、析构函数
===================

1. 构造函数的调用顺序

#. 构造函数初始化列表,初始化顺序

#. 拷贝构造函数的细节

#. 委托构造函数的优缺点

#. 委托构造函数的优缺点

#. 构造函数里面可以调用成员函数吗

#. 有参构造函数里面可以调用无参构造函数吗

#. 委托构造函数的优缺点

#. 拷贝构造函数的注意事项

#. 移动语义和移动构造函数

#. 拷贝构造函数的作用

#. 初始化参数列表和构造函数体的区别

#. 构造函数发生异常会怎么廓

#. 拷贝构造函数的调用的时机

#. 拷贝构造函数取引用的原因

#. 如何减少构造函数的开销

#. 如何禁止构造函数的使用

#. 构造函数可以申明为 virtual 的形式吗，如果声明会发生什么

#. 析构函数能不能virtual？

强制转换
===========

1. 什么类型转换：static_cast, const_cast这些

#. 四种 cast 强制类型转换的区别和使用？

#. 强制转换

#. 四种类型强制转换运算符及使用场景

#. 有哪些强制类型转换，使用区别

#. 强制类型转换的类型和使用场景

#. 强制类型转换

#. 有哪些强制类型转换，使用的区别

#. 左值和右值得区别，如何将左值转换成右值

#. 如何避免编译器进行的隐式类型转换

引用
===========

1. 是否可以返回局部变量的引用

#. 右值引用的概念

#. C++引用的概念

#. 左值 右值引用

#. shared_ptr如何避免循环引用，不用weak_ptr：如果不用引用计数，如果避免xun'hgcroot

#. c++有&引用；c没有

#. 这里右值引用怎么实现呢

#. 值传递和引用传递

#. 如何让 .h 文件不被重复引用

#. 引用和拷贝的区别？

#. 引用的优缺点和拷贝的优缺点？

#. 左值引用和右值引用的区别？

拷贝
=========

1. 说一下零拷贝

#. 拷贝构造和拷贝赋值

#. 浅拷贝和深拷贝

#. strcpy会拷贝字符串最后的/0吗

#. buffer 拷贝的过程

#. C++ 中如何避免拷贝

堆和栈
==========

1. 栈和队列的区别

#. 栈与堆区别

#. 栈和队列

#. 设计一个类，不允许生成栈上的对象

#. 设计一个类，不允许生成堆上的对象

#. 栈和堆的区别，怎么解决栈的溢出问题？

#. 栈溢出的可能情况

#. 堆和栈各存储什么变量，各有什么特点，为什么要分stack和heap，还有什么存储空间？

#. 栈空间大小

#. 堆空间大小

#. 堆和栈的用法和区别

#. 如何限制对象只能在堆上创建

#. 如何限制对象只能在栈上创建

#. 一般程序中栈大小多少

#. 什么情况会发生栈异常？

线程
=======

1. C++线程同步方法和使用场景

#. c++怎么进行多线程编程

#. 有哪些创建线程的方法

#. 哪些关键字可以修饰线程安全的变量

#. 在多线程有过实践吗，或者你对多线程有什么了解？

#. join 有哪几种方式？

编译、链接、执行
==================

1. #define的作用，有什么具体用法，在编译中会怎么样？

#. 条件编译

#. 头文件中 #ifdef，#endif 有什么作用

#. C++ 编译过程

#. 未初始化的全局变量放在哪里，编译后在二进制文件中有它的位置吗

#. 讲了下交叉编译和调试方式

#. 链接的时候怎么找到这个变量呢？

#. C++从源文件到可执行文件的过程

#. 静态链接、动态链接

#. C++ 从源代码到可执行文件经历了哪几个过程

#. 程序到执行分为几步

#. 可执行程序由哪几个部分组成

#. 动态库和静态库有什么区别，如何理解动态库的“与位置无关代码”的含义

#. 代码的执行流程，从代码到程序运行整个流程说一下

左值、右值
===============

1. 左值和右值的区别，右值引用的概念及其应用场景

#. 左值和右值，怎么使用，有什么区别

宏
==========

1. 宏是在什么时候完成的

#. 宏定义和内联函数的区别

#. 宏定义和内联函数的区别

#. 写一个宏，输出数组的大小

#. inline 和宏的区别

#. 用宏实现比较大小

#. 写一个宏，表示求 a 和 b 的最小值

函数
===========

1. 什么是仿函数

#. strcpy 与 memcpy 的区别

#. switch 参数有什么限制

#. sizeof 和 strlen的区别

#. 一个函数的形参是数组，在函数内部调用 sizeof 和 strlen 分别得到什么答案

#. sizeof 关键字的使用

#. strlen 和 sizeof 区别

#. 字符数组和字符串的sizeof和strlen

#. sizeof 和 strlen 的区别

#. strcpy 函数有什么缺陷，如何优化

#. memcpy和strcpy有什么区别

#. memove和memcpy有什么区别

#. 一个结构体，能够用 memcpy 判断两个结构体存的东西是不一样的吗？

#. 如何在 main 函数之前执行一段函数

#. 能够使用 memcpy 判断两个结构体存的东西是一样的吗

#. 如何在 main 函数之前执行一些操作

#. 静态成员函数和普通函数的区

#. 静态成员函数和普通的静态函数的区别，可以通过对象实例访问吗

#. 静态函数和非静态函数的区别

#. 函数调用机制

#. c++ 如何使用c实现的函数

#. c++ 中如何调用 c 写的函数

#. memcpy 函数常用吗？怎么实现？怎么提高效率

#. sizeof和strlen 的区别

#. sizeof和strlen的区别

#. 函数传参有哪几种方式

#. 函数传值的方式？

结构体
=============

1. 字节对齐的概念，为什么要字节对齐

#. 结构体字节对齐

#. 结构体字节对齐的原则和好处

#. 如何判断结构体是否相等

萃取
========

1. 什么是类型萃取

#. traits 的原理以及作用

变量
=======

1. 全局变量，局部变量，静态变量联系和区别

#. 全局变量和静态全局变量的区别

#. 全局静态遍历和局部静态变量得区别

#. 全局变量定义在头文件中有什么问题

#. 全局变量，静态全局变量可以被其他文件调用么，为什么

#. c++中，变量可以再任何地方声明；c中，局部变量只能在函数开头声明。

#. 在全局声明使用的区别和局部声明的区别

内存
=======

1. C++ 内存管理

#. 内存分配

#. 虚拟内存说一下

#. 类的内存布局

#. C/C++内存有哪几种类型？

#. 在内存受限的前提下排序数据（归并），优化I/O与缓存

#. C++内存池，具体实现

#. 内存泄漏的几种原因，循环引用是怎么回事

#. 内存泄漏知道吗？

#. 内存越界和野指针的概念

#. 内存泄漏的概念，哪些情况会出现内存泄漏，定位内存泄漏的方法

#. C++程序内存分部

#. shared_ptr的行为最接近原始指针，是否可以在任何地方代替原始指针并消灭内存泄漏

#. 介绍C++内存分布，每个字段分别是什么作用，栈帧里面都是什么

#. STL的vector内存分配

#. 类的内存布局，类中属性和方法的存储位置

#. C++的内存是怎么分配的

#. c++的共享内存实现

#. STL内存池有了解吗

#. C++内存区域

#. C++内存分配有哪几种方式？画出C++内存布局图？

#. 将数组定义在函数内部和外部有什么区别？分配的内存在哪里？

#. c的内存分区

#. 指针怎么分配内存，分配好后怎么判断分没分配成功

#. 内存对齐的原则和作用

#. 什么是内存对齐，为什么要内存对齐

#. 内存对齐的作用

#. 内存对齐机制

#. 内存对齐是什么，为什么需要

#. 如何避免内存泄漏

#. vector如果没有内存中没有连续空间怎么办

#. 类对象的内存分布与生存周期

#. 为什么需要内存对齐，提高效率的原理

#. C++ 内存空间布局

#. c++ 内存分区

#. 如何排查内存泄漏

#. 什么是内存泄漏，怎么防止内存泄漏

#. C++ 的内存分布

#. 内存对齐的原则

#. C++ 内存分区，未初始化的全局变量放在哪？如果编译了在二进制文件里会有他的位置吗？

#. vector 底层如何实现的，如果内存不够执行什么操作

#. c++ 的虚拟内存分布？

#. 在全局范围和局部范围声明时在内存的分布情况

#. 你觉得这些定位开源定位内存泄露的工具是怎么实现的

#. 栈和堆的区别，如何分配内存

#. 如果我 new 了一个内存，然后在 delete 之前这个进程被系统杀死了。那这样是内存泄露吗？

#. 什么情况发生内存泄露

#. char arr[20]和char \*p = new char[20]的区别？初始化和未初始化的情况？放在内存的那个位置？

malloc
===========

1. malloc和alloc的区别

#. malloc的整过程

#. New和malloc的区别

#. malloc 和 new 的区别，free 和 delete 的区别

#. malloc 底层原理

#. new 和 malloc 的区别；delete 和 free 的区别

#. new 和 malloc 区别，如何判断是否申请到内存

#. malloc 和 mmap 的底层实现？malloc 分配的是什么

#. 怎么实现 malloc 和 free 方法

#. new跟malloc的区别？在使用上区别，不单纯的是定义？

#. malloc 和 new 的区别，delete p 和delete[] p 有什么区别

#. malloc 的原理

new
=========

1. malloc和new的区别

#. 为什么要引入new

#. new 的作用

#.free、delete

#. delete和free的区别

#. 程序大量molloc和free会有什么后果，怎么解决

#. free是如何识别free区域的

#. delete 怎么知道要删除多长的

#. delete 和 delete[] 的区别

stl
=========

1. STL的vector的区别和优越性

#. 熟悉stl吗？熟悉哪些？

#. C++中的STL，介绍一下有什么？

#. STL有哪些容器，底层是怎么实现的

#. STL的vector与list区别

#. stl的list和vector有什么区别？

#. stl源码剖析讲一讲你了解的

#. 哪些STL容器是线程安全

#. 看过STL吗？

#. STL都有哪些容器

#. STL有使用过哪些呢？我回答了vector、list、pair，后续又追问vector是个什么呢？你使用的哪个呢？pair是个什么？什么情况下使用的？

#. 简历上说看过stl，问两个问题，string存在栈还是堆中

#. 那你stl是看了哪些

#. STL使用

#. 你了解过 stl 容器中的哪些容器，以及使用的场景和区别？

#. 用过 stl 吗，用过哪些？

#. stl 是线程安全的还是不安全的？

#. push_back的时间复杂度及推导

#. vector何时进行空间的搬运？

#. 大批量对象的搬运进行了怎样的优化？

#. 为什么要vector的新空间为2倍？

#. vector和list的区别？

#. vector和list的区别，分别适用于什么场景？

#. 两个线程同时读写一个vector对象是否安全

#. vector和list使用场景

#. vector的扩容机制

#. vector如果不够用了是扩大多少

#. 讲一下vector和迭代器

#. Vector扩容机制了解吗？（扩容1.5倍或2倍，数据复制等）

#. vector和list的区别

#. list和vector实现有什么区别？讲讲vector的resize操作？

#. vector底层是什么，它的扩容问题

#. vector如实现动态增长？

#. 那你说一说vector吧

#. 它的默认空间是多少

#. 迭代器是怎么动态分配

#. 它内部元素可以重复嘛

#. 它内部实现是什么

#. 它扩容的过程是怎样的

#. vector底层数据结构，vector底层是如何删除元素

#. vector和list的区别

#. vector 扩容机制

#. vector 中 size 和 capacity 的区别

#. vector 中扩容的原理和具体实现方式？

#. vector 的一个扩容原理？

#. 如果让你实现 vector 动态删除然后容量缩小你会如何设计？

#. 怎么删除list中的一个数据？

#. clear之后空间会没么

#. 怎么调整空间大小

#. emplace_back 与 push_back 区别

#. deque的实现原理

#. unordered_map怎么解决哈希冲突？哈希冲突太多会导致什么？

#. Ordered_map和底层实现红黑树

#. map底层的数据结构

#. map删除元素及迭代器失效的解决办法

#. STL的map和unordered_map底层实现细节

#. map如何实现的，map的如何查找，unordered_map呢

#. C++ map实现原理

#. Unordered_map底层实现是什么？

#. 这个实现和map有什么区别，谈谈优劣势

#. map底层实现是什么？

#. STL中map和hashmap的区别，使用场合，hash建立需要注意什么？

#. map底层实现是什么？

#. Unordered_map底层实现是什么？

#. 这个实现和map有什么区别，谈谈优劣势

#. Map和unordered_map的区别，查删增操作时间复杂度分别是多少

#. STL中map和hashmap的区别，使用场合，hash建立需要注意什么？

#. 你知道map吗？怎么实现的？我回答了STL里面的map，底层用了是什么呢？有什么特点？自平衡是自动平衡吗？怎么实现自平衡的？和普通的有什么区别呢？

#. 变量的声明和定义有什么区别呢？变量的声明和定义再编译和链接阶段有什么区别呢

#. map底层实现

#. unordered_map底层实现

#. C/C++里面用过哪些容器？map/unorder_map底层原理与区别？

#. map底层数据结构，为什么用红黑树，红黑树查询效率为什么快

#. unordered_map 怎么实现的？画一下底层的数据结构

#. STL 中 Vector，List 和 Map 的底层原理

#. map 和 unordered map 的底层实现和性能区别，获取元素和删除增加元素？

#. 讲一下 stl 中 map？

#. map和unordered map的区别

#. sorted_set 怎么实现
#. set的insert方法的返回类型

#. set如果插入值是重复的会怎么样

#. set的底层实现

迭代器
===========

1. 迭代器什么时候会失效

move
==========

1. std::move怎么实现的

#. C++11 中 move 和 forward 的区别

#. move移动语义

#. std::move 的使用

#. std::move() 函数的实现原理

#. 移动语义有什么好处

extern
============

1. extern "C"在C++中作用是什么？

#. extern "C"作用

#. extern c 的原理

#. extern 关键字的底层机制是怎么实现的

lambda
=========

1. lambda表达式如何使用

#. lambda表达式的作用以及语法

inline
==========

1. inline作用，优缺点

#. inline 和 define 的区别

#. inline 和宏定义的区别

#. inline 的作用

#. inline关键字得使用

#. 内联函数和宏定义的区别

#. inline和宏定义的区别

#. inline 实现原理

static
===========

1. static的作用

#. 函数和变量前用static修饰有什么作用

#. const和static的区别

#. static 变量和函数

#. static 关键字的使用

#. 类内static 成员可以定义为 const的吗

#. static 关键字的使用和作用

#. static 关键字的使用场景

#. static、const的作用

#. 全局 static 变量和非 static 的有什么区别

#. static 的作用，类的静态遍历初始化方式

#. static int i=1024

#. c++11 中可以用什么特性替换单例模式中的 static 写法？

const
============

1. const是什么

#. int const* 和 int* const 有什么区别

#. c++中，const型常量是编译时常量；c中，const常量只是只读的变量。

#. #define和const的区别？

#. const 关键字的使用

#. const 的作用和用法

#. const的应用场景 可以修饰的类型

#. const int \*p 和 int \* const p 的区别

#. define 和 const 的区别

#. violatile 能否和 const 一起用

#. const 的作用，函数前面和函数后面有什么不一样？

#. const修饰变量放在不同位置时的含义

volatile
==============

1. volatile 关键字

#. volatile 关键字的作用

#. volatile 能保证线程安全吗，不能的话怎么解决

#. volatile 关键字的使用场景

#. violatile 的作用，是否具有原子性，对编译器有什么影响

#. 什么场景一定要使用 violatile

其它
========

1. auto和decltype如何使用

#. explicit 干什么用的

#. C++ 三大特性

#. 面向对象三大特性，详细介绍

#. C++熟悉吗？三大特性是什么？

#. C++ auto 类型推导的原理

#. auto 类型推导的实现原理

#. C++11新特性

#. C++ 14 新特性

#. C++ 20 新特性

#. 介绍一下c++11新特性：lambda表达式、智能指针、类型转换、右值引用

#. C 和 C++ 的特点与区别

#. c++相对其他语言区别

#. 迭代器失效

#. c++的弊端在哪里

#. c++出本书打算怎么写章节

#. 读过什么 c++ 的书？

#. 了解完美转发吗？

#. 大小端模式、转换；

#. 函数默认参数

#. virtual关键字有哪些用法

#. virtual关键字的作用

#. 了解过类型萃取吗？

#. 类型萃取的实现？

#. define 和 online 的区别

#. define 和 typedef 区别

#. future 和 thread 了解吗？

#. 抽象函数能不能实例化

#. 抽象类可以有成员变量吗？

#. 平时自己有封装的经验吗？

#. 什么情况下进行列表初始化

#. java,python,C++的区别？

#. c++11 nullptr 比 NULL 的优势

#. sort()底层是怎么实现的

#. i++是原子操作吗

#. i++和++i的区别

#. #include<> 和 #include"" 的区别

#. switch的case 里为何不能定义变量

#. sizeof(1==1) 在 C 和 C++ 中分别是什么结果

#. 有什么方法保证每个头文件只被使用一次